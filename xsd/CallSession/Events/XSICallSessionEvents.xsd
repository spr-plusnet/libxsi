<?xml version="1.0" encoding="UTF-8"?>


    <!-- ************************************************************************ -->
    <!--     Copyright (c) 2008 BroadSoft, Inc.  All rights reserved.             -->
    <!-- ************************************************************************ -->
    <!--                XSI  X M L  S C H E M A                                   -->
    <!--               *************************                                  -->
    <!-- This file defines the schema types and elements required by the          -->
    <!-- CallSession Event interface in the http://schema.broadsoft.com/xsi       -->
    <!-- name space.                                                               -->
    <!--                                                                          -->
    <!-- The Elements and Types are defined in the Alphabetical Order with        -->
    <!-- grouping at the Element, Complex and Simple level respectively.          -->
    <!-- ************************************************************************ -->


<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://schema.broadsoft.com/xsi"
  targetNamespace="http://schema.broadsoft.com/xsi"
  attributeFormDefault="unqualified" elementFormDefault="qualified"
  version="1.0">



  <xs:include schemaLocation="../XSICallSession.xsd" />
  <xs:include schemaLocation="../../XSIBaseEvent.xsd" />

  <!-- **************************************************************-->
  <!--   Complex Type in Alphabetical Order.                         -->
  <!-- **************************************************************-->


  <xs:complexType name="CallAnsweredEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Answered event is generated when a call originated or received
        by the subscriber is answered.
        For a given call, there may be more than one Call Answered event
        generated. This can happened for instance if an Active call is
        redirected following a Blind Transfer request. In such case, the
        call will go back in Alerting state. Once the transferred
        destination answers the call, a new Call Answered event is
        generated. As a result, a total of two Call Answered events will
        have been received: the first one before the transfer (since the
        call was already in the active state prior to the transfer) and
        the second one after the successful transfer. The answerTime
        captured in the event always indicates the time of the first
        call answer. The call state is Active.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallBargedInEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Barged-in event is generated when a call is conference in as a
        result of a Directed Call Pickup with Barge-in request. The
        event is generated against the subscriber for which the call is
        barged-in. The new externalTrackingId is reported in this event.
        The call state is either Active or Held. 
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="CallClientSessionInfoUpdatedEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Client Session Info Updated event is generated when  
        client session info is updated for the call.
         
        Change History:
        20.0 - added.
        
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>  
  
  <xs:complexType name="CallSecurityClassificationUpdatedEvent">
    <xs:annotation>
      <xs:documentation>
        CallSecurityClassificationUpdatedEvent informs the remote     
        application of changes to the security classification    
        level of a call for users that have the security  
        classification service assigned. The event contains the call 
        classification level name.  The event is generated when
        (a) there is a change in the call classification level caused
        by a user changing his current classification level,
        (b) there is a change in the call classification level caused 
        by the remote user changing his user classification level (c) there is 
        a change to the call classification level caused by changes to the     
        call connected party (i.e. transfers).
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="CallCollectingEvent">
    <xs:annotation>
      <xs:documentation>

        The Call Collecting event is generated when BroadWorks needs to collect
        information by interacting with a subscriber. This event
        generated in two types of situation:

        i) When programming a service through a Feature Access Code. This
        happens for instance when a subscriber activates Call Forward
        Always.
        ii)When BroadWorks requires some information before calling the remote
        party. This happens for instance when a subscriber invoke the
        Calling Line ID Blocking service before dialing. This can also
        happen when BroadWorks require an authentication or accounting
        code before calling the remote party. Note that in these cases,
        the Call Collecting event is not generated if the service
        activation precedes the setup of a call and the destination is
        already known from the dialed digits.


        The callId and externalTrackingId is generated when the call is
        established with BroadWorks and included in the event. The call
        state is Active and the personality is originator. The address
        parameter of the remoteParty is set to the dialed digits.

      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="CallDetachedEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Detached event is sent when the call is no longer being presented 
        to the user and call control actions are no longer available.         
        
        R21.0 - Added.      
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="CallEvent" abstract="true">
    <xs:annotation>
      <xs:documentation>
        The base event type for CallEvents
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EventData">
        <xs:sequence>
          <xs:element name="call" type="Call">
            <xs:annotation>
              <xs:documentation>
                Contains the details of a Call.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
 
  <xs:complexType name="CallForwardedEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Forwarded event is generated when a call is forwarded as a
        result of the application of a BroadWorks service (e.g. Call
        Forward Always). The call state is Alerting. The personality is
        "Originator" or "Click-to-Dial". The remoteParty specifies where
        the call was redirected.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallHeldEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Held event is generated when the subscriber or the remote
        party holds the call. The event indicates whether the call was
        held by the subscriber or remote party. The call state is Held
        or Remote Held depending on which party held the call. Remote
        party call hold is only reported for group/enterprise calls in a
        standalone application. Also, if the call is already held
        locally, then the remote party call hold is not reported.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallMonitoredEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Monitored event is generated when a call is monitored as a
        result of a Monitor Next Call request. The new
        externalTrackingId is reported in this event. The call state is
        Active. The remotePartyInformation identify the monitoring
        subscriber.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallOriginatedEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Originated event is generated when a call is being originated
        by the subscriber. This can happen in two cases:

        1. When the calling subscriber manually initiates a call by dialing a
        destination on its device. In this case a new callId and the
        externalTrackingId are generated by BroadWorks.

        2. When the remote application has initiated a call through a dial
        request. In this case, first a Call Originating event is
        generated when the system has accepted the request. Once the
        subscriber has accepted the dial attempt (by going off-hook),
        then the call personality changes from "Click-to-Dial" to
        "Originator" and a Call Originated event is issued. Both the
        Call Originating and Call Originated event have the same CallId
        and external-tracking-id. In both cases, the call state is
        Alerting and the personality is originator. 
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallOriginatingEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Originating event is generated when a dial request is accepted
        by BroadWorks and an attempt is made to alert the subscriber's
        endpoint(s). The callId and externalTrackingId are generated at
        this point and included in the event. The call state is Alerting
        and the personality is click-to-dial. The address parameter of
        the remoteParty is set to the dialed phone number.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallPickedUpEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Picked-up event is generated when a call is picked-up as a
        result of a Directed Call Pickup request or Directed Call Pickup
        with Barge-in where the call state was in Alerting. The event is
        generated against the subscriber for which the call is
        picked-up. The new externalTrackingId is reported in this event.
        The call state is Alerting.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallParkRetrievedEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Park Retrieved event is generated when a parked call is
        retrieved. The event is generated against the subscriber for
        which the call was parked and now retrieved. The new
        externalTrackingId is reported in this event. The call state is
        Alerting.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallReceivedEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Received event is sent when a subscriber receives an
        incoming call.

        For subscriptions to the Advanced Call 2 event package, the event is
        generated prior to service processing (e.g. CFA).

        For subscriptions to the Basic Call event package or the Advanced Call
        event package, the event is generated after service processing.
        If the call is forwarded to a new destination, or rejected
        without alerting the user's device(s) (e.g. do not disturb),
        then the event is not generated.

        This event is also generated in cases where the subscriber is being
        recalled (e.g. call transfer recall). It contains information on
        the caller in the remoteParty parameter.

        The call state is Alerting and the personality is terminator.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallRecordingStartingEvent">
    <xs:annotation>
      <xs:documentation>
        The CallRecordingStartingEvent is generated when the call recording request has been processed 
        but cannot be started yet because the call is held. 
        R20.0 - Added.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="CallRecordingStartedEvent">
    <xs:annotation>
      <xs:documentation>
        The CallRecordingStartedEvent is generated when the call recording has started. 
        R20.0 - Added.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="CallRecordingPausedEvent">
    <xs:annotation>
      <xs:documentation>
        The CallRecordingPausedEvent is generated when the call recording is paused.
        R20.0 - Added.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="CallRecordingResumedEvent">
    <xs:annotation>
      <xs:documentation>
        The CallRecordingResumedEvent is generated when the call recording is resumed.
        R20.0 - Added.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>  
  
  <xs:complexType name="CallRecordingStoppedEvent">
    <xs:annotation>
      <xs:documentation>
        The CallRecordingStoppedEvent is generated when the user sends an explicit stop recording request, 
        or when the call recording fails.
        R20 - Added.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent">
        <xs:sequence>
          <xs:element name="reason" type="RecordingStoppedReason">
            <xs:annotation>
              <xs:documentation>
                The reason for why the recording has been stopped.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>      
    </xs:complexContent>
  </xs:complexType>  

  <xs:complexType name="CallRedirectedEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Redirected event is event is generated when one or more calls
        are redirected by the subscriber. The event includes the
        redirection reason which indicates the type of redirection (e.g.
        simultaneous ring, call forward always, blind transfer). The
        call state is set to Detached.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EventData">
        <xs:sequence>
          <xs:element name="calls" type="CallList">
            <xs:annotation>
              <xs:documentation>
                Contains a list of Call.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallReleasedEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Released event is generated when a call is released, either by
        the subscriber or the remote party. The event is also generated
        when the dial request is aborted without the subscriber going
        off-hook. The call state is released and the release cause is
        set.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallReleasingEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Releasing event is generated when a call is connecting to a
        treatment. The call is eventually released when the treatment
        finishes playing or when the subscriber hangs up. The release
        cause is set to the appropriate value. The address parameter of
        the remoteParty is set to the dialed digits.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallRetrievedEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Retrieved event is generated when the subscriber or
        remote party retrieves a held call.The event indicates whether
        the call was retrieved by the subscriber or remote party. The
        call state is Active. Remote party call retrieve is only
        reported for group/enterprise calls in a standalone application.
        Also, if the call is already held locally, then the remote party
        call retrieved is not reported.
            </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallSubscriptionEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Subscription event is issued immediately after a subscription
        is added or refreshed, provided that the subscription target is
        not a collection of subscriber (e.g. a group) and that contact
        were registered with the subscription.
        
        Release Modified: R19.sp6
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EventData">
        <xs:sequence>
          <xs:element name="calls" type="CallList" minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                Contains the list of calls maintained by the subscriber. Refer to
                Appendix A for more information. Only present if there
                is at least one call maintained by the subscriber.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="conference" type="Conference"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The details of the conference maintained by the target subscriber.
                This parameter is only present if the subscriber is a
                conference controller.
                            </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hookStatus" type="HookStatus">
            <xs:annotation>
              <xs:documentation>
                Indicates the hook status of the user when a subscription is 
                added or refreshed.  
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="CallSubscriptionResyncEvent">
    <xs:annotation>
      <xs:documentation>
        The CallSubscriptionResyncEvent is generated when a situation arises that causes a loss of updates and a resync is needed. 
        Change History:
        Release Added: R19.sp1 
        Release Modified: R19.sp6
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallSubscriptionEvent" />
    </xs:complexContent>
  </xs:complexType>  

  <xs:complexType name="CallTransferredEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Transferred event is generated when the call is transferred by
        the remote party, resulting in a call state or
        externalTrackingId change. This event is only generated for
        group/enterprise call redirections . The external-tracking-id
        and personality are modified in the case of a transfer with
        consultation.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallUpdatedEvent">
    <xs:annotation>
      <xs:documentation>
        The Call Updated event is generated when call attributes are
        modified,with the call state not being modified. Examples of
        such updates are: remote party information changes, local
        endpoint changes, personality changes. Local endpoint changes
        occurs if for instance a subscriber has multiple access
        endpoints and performs a Call Retrieve from a phone, then the
        AccessEndpoint is expected to be modified. A Personality change
        can occur during a Directed Call Pickup with Barge-in
        As a result, a remote application must inspect the various field of
        the Call Updated event to determine what change occurred since
        the last notification.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CallEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConferenceCallMadeDeafEvent">
    <xs:annotation>
      <xs:documentation>
        The Conference Call Made Deaf event is sent when a call is made
        deaf through a Conference Deaf Call request. The conferenceEntry
        specifies which call is deaf or not.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConferenceEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConferenceCallMadeUnDeafEvent">
    <xs:annotation>
      <xs:documentation>
        The Conference Call Made Undeaf event is sent when a call is no
        longer deaf through a Conference Undeaf call. The
        conferenceEntry specifies if a call is deaf or not. BroadWorks
        issues this event by sending a ConferenceCallMadeUndeafEvent.
        This event contains the common parameters listed at the
        beginning of this section and the following specific parameter.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConferenceEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConferenceCallMutedEvent">
    <xs:annotation>
      <xs:documentation>
        The Conference Call Muted event is sent when a call is muted
        through a Conference Mute Call request. The conferenceEntry
        specifies which call is muted or not.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConferenceEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConferenceCallUnMutedEvent">
    <xs:annotation>
      <xs:documentation>
        The Conference Call Unmuted event is sent when a call is no longer
        muted through a Conference UnMute Call request. The
        conferenceEntry specifies if a call is muted or not.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConferenceEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConferenceEvent">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EventData">
        <xs:sequence>
          <xs:element name="conference" type="Conference">
            <xs:annotation>
              <xs:documentation>
                Contains the details of a Conference.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConferenceHeldEvent">
    <xs:annotation>
      <xs:documentation>
        The Conference Held event is sent when the conference is put on
        hold. The conference state is Held.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConferenceEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConferenceReleasedEvent">
    <xs:annotation>
      <xs:documentation>
        The Conference Released event is sent when the conference is
        released. The conference state is released.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConferenceEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConferenceRetrievedEvent">
    <xs:annotation>
      <xs:documentation>
        The Conference Retrieved event is sent when the conference is
        retrieved from hold. The conference state is Active.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConferenceEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConferenceStartedEvent">
    <xs:annotation>
      <xs:documentation>
        The Conference Started event is sent when a conference is started.
        The conference state is Active.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConferenceEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConferenceUpdatedEvent">
    <xs:annotation>
      <xs:documentation>
        The Conference Updated event is sent when the conference parameters
        are modified, with the conference state not being modified.
        Examples of such updates are: local endpoint changes,
        participant added, participant removed. Local endpoint changes
        can occur if a subscriber perform a Call Retrieve from a phone,
        then the AccessEndpoint is expected to be modified.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConferenceEvent" />
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HookStatusEvent">
    <xs:annotation>
      <xs:documentation>
        The Hook Status Event is sent when there is a change in the hook 
        status for a user. For example, the event is sent with a hook status 
        indicating "Off-Hook" when a user goes off hook to place a call or 
        to answer a call. The event is sent with a hook status indicating  
        "On-Hook" when the user goes on-hook when the user hangs up to release a 
        call.

        Release Added: R19.sp6
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EventData">
        <xs:sequence>
          <xs:element name="hookStatus" type="HookStatus">
            <xs:annotation>
              <xs:documentation>
                Indicates the hook status of a user.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
     </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="VoiceMailMessageSummaryEvent">
    <xs:annotation>
      <xs:documentation>
        Notification with the updated voice mail message summary status for the
        Third-Party Voice Mail Support/Voice Messaging service.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="EventData">
        <xs:sequence>
          <xs:element name="messageSummary" type="MessageSummary">
            <xs:annotation>
              <xs:documentation>
                The updated voice mail message summary for the Third-Party Voice
                Mail Support/Voice Messaging service.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
</xs:schema>